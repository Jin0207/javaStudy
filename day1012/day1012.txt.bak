객체지향프로그램(Object Oriented Programming -- OOP)
-- 현실에 있는 모든 것을 객체화 시킬 수 있다.

객체: 세상에서 단 하나 밖에 없는 "유일"한 것
ex) 내가 들고 있는 "펜", 내 스마트폰 ...

클래스: 객체를 표현하기위한 설계도

객체를 표현하기 위해서는
 표현하고 자하는 객체에 대한 속성(변수)와 기능(메서드)를 분석하여 클래스를 만들고
 그 클래스의 객체를 생성하여 사용한다.


객체지향 프로그래밍의 특성
1. 은닉성 = 캡슐화

외부의 다른 클래스로부터 속성(멤버변수)들을 보호한다.
메서드를 통해서 간접 접근하도록 한다.

보호하기 위해서는 접근명시자를 사용한다.
접근명시자의 종류는 private와 public이 있다
.
외부로 부터 보호할 속성들은 private영역에 두고
private영역의 속에 접근하는 메서드들을 public에 두어서 클래스를 만든다.

private 영역인 속성(멤버변수)에 직접 접근할 수 없다.
접근할 수 있는 메소드를 public에 만들어두고 간접적으로 접근해야한다.

접근해서 값을 변경하는 메서드를 set~로 이름 짓고
접근해서 값을 읽어오는 메서드를 get~로 이름을 짓는다.
이것을 setter, getter라고 부른다

따라서, 클래스를 만들때
보통은 모든 멤버변수들을 private영역에 두고
그 private영역의 멤버변수에 접근하기 위한 setter,getter를 public에 모두 만든다.

setter는 멤버변수의 값을 변경하기 위한 메서드이니
어떤값으로 바꿀지 매개변수가 필요하고
getter는 매개변수가 필요없다.

getter는 멤버변수의 값을 반환하는 메서드이니
반환값, 반환타입이 있고
setter는 멤버변수의 값을 변경하는 메서드이니
반환값이 없다 -> void 타입


---------------------------------------------------------------------------
객체참조변수를 출력문에 써주면
toString메서드가 자동으로 동작한다.
하지만 toString메서드가 없으면
그 객체의 클래스 이름과 정보를 갖고 있는 주소값(어디에 저장되어있는지)이 출력된다.

만약 그 클래스의 속성값을 문자열로 출력할 일이 있다면
String으로 반환하는 toString메서드를 만들어준다
-----------------------------------------------------------------------------------------

배열의 요소가 자동으로 초기화 되듯이
클래스의 멤버변수들도 자료형타입에 따라 자동으로 초기화됨

------------------------------------------------------

반환값이 없는 메서드는 출력문에서 호출할 수 없음.

-----------------------------------------------------------
BankAccountTest.java:1: error: class BankAccount is public, should be declared in a file named BankAccount.java
public class BankAccount
       ^
1 error

error : 하나의 파일에 두개 이상의 클래스로 구성될 때에는
           반드시 메인메서드를 가지고 있는 클래스이름으로 파일명을 저장해야하며
	   public 접근제어자를 사용할 경우,
	   그 클래스 만이 public이어야한다.

public 클래스와 main메서드
하나의 파일에 2개 이상의 클래스를 만들 때에는
소스파일명과 동일한 클래스이름에 public을 붙이고
그 클래스에 있는 main메서드가 동작한다.
========================================================================

<this 키워드>
생성자나 멤버메서드의 매개변수 이름을 유의미한 이름으로 지어주다 보면
매개변수의 이름과 멤버변수의 이름이 똑같을 수 있다.
이때, 멤버메서드 안에서 같은이름의 변수를 사용하게 되면
자바는 가까운 매개변수이름으로 알고 작동하게 된다. (매개변수 이름이 우선순위가 높음)
그렇기에 
자바에게 이 이름은 멤버변수이름이고 저 이름은 매개변수이름이라고 알려주기 위해서
this.을 멤버변수이름 앞에 붙혀준다.

<생성자>
클래스 이름과 똑같은 이름을 가진 특수한 메서드
다른 일반메서드들은 호출문에 의해서 작동되는 것에 반해,
이 메서드는 객체생성시에 자동적으로 수행되어 객체를 생성함과 동시에 멤버변수들의 값을 초기화해준다.

즉, 생성자는 멤버변수들의 값들을 초기화 해주기위해 사용되며,
호출할 필요없이 자동으로 생성되므로 return type을 사용하지 않는다.
또한, return type이 존재하지 않기때문에 반환타입 자체가 없다.(void라고 쓰면 error!)

생성자는 멤버변수들의 값을 초기화해준다.
그래도 setter는 존재한다.

생성자는 객체가 생성될 때 단 한번 멤버변수들의 값을 초기화해주기에
이후에 값을 변경해주어야할 상황이 있을 수 있기에 setter가 필요하다.

보통, 생성자도 setter도 둘다 만든다.

<생성자의 매개변수>
생성자도 일반 메서드처럼 필요하다면 매개변수를 가질 수 있다.

<생성자의 중복>
클래스를 만들때
생성자를 여러개 중복하여 만들 수 있다.
단, 생성자를 중복사용할 땐,
"매개변수의 개수" 나 "매개변수의 자료형"이 달라야 한다.

매개변수의 순서가 다른 건 상관없음! 개수나 자료형이 달라야함!

ex)
Dog(int age, String name);
Dog(String name, int age);
Dog(int age, String addr); //error

=============================================================================================================

this()

생성자에서 다른 생성자를 호출한다.
같은 클래스내의 생성자들은 모두 이름이 같고,
객체를 초기화하기위해 작성된다.

이름도 같고 하는 일도 같고
다루는 멤버변수들도 같기 때문에

한 생성자에서 다른 생성자를 호출할 때,
클래스 이름이 아닌 this를 사용해서 호출한다.
단,
this()는 생성자의 첫 줄에서 한번만 호출할 수 있다.

class Car
{
	String color;
	int door;

	Car(){
		this("빨강", 4); // 밑의 생성자를 호출
	}
	Car(String color, int door){
		this.color = color;
		this.door = door;
	}
}