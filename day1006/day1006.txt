<무한반복>
for( ; ;){ //실행할 명렁어(들)}
-- ()안은 계속 true가 되어서 {}안의 명령어(들)을 계속 실행함

-무한반복을 종료시키기위해서는
  for문이 오기전에 변수를 초기화시켜주고
  for문 안에 조건식을 두고
  조건식 안에 선언해둔 변수를 증감식을 사용해 만족시키면 종료가됨 -- break문 이용

ex) 
   int i = 0
   for( ; ;){
     System.out.println("Hi");
     if( i > 2 ){ //i가 2보다 크다면 break실행
         break;
      }
      i++
   }
 --------------------------------------------
 Hi
 Hi
 Hi
 i = 3이 되고 break문을 통하여
 속해있는 { }를 탈출한다.
========================================================
<while 문 >
  변수초기화
  while(조건식){
    반복실행할 명령어(들)
    증감식
   }

ex)
int i = 0;
while( i < 2){ // i가 2보다 작을동안에 {}안을 실행한다
  System.out.println("hi");
  i++;
}
------------------------------------------------
Hi //i =0
Hi //i=1
Hi //i=2
//i=3 종료
==========================================================
<do while 문>
 변수초기화
 do{
    반복실행할 명령어(들)
    증감식
   }while(조건식);

do를 만나면 {}안 한번 실행,
그러고 난 뒤 while의 조건식이 true인지 확인
true이면 {}실행, false이면 반복문 종료
while()뒤에는 ;을 항상 적어준다.
=========================================================
<while문과 do while의 차이>
while문: 
while을 만나면 조건식을 확인하고 난 뒤에
{ }안의 명령어(들)을 실행시킴

do-while문:
do를 만나고 {}을 실행한 뒤에 
while문의 조건식을 확인한다.
-==========================================================
반복문 : for문, while문, do-while문이 있다.

반복횟수가 정해져 있다면 
"for문"을 많이 씀
사용자의 입력값(혹은 조건이)만족할 동안 "계속" 실행해야하는 경우
while이나 do-while문을 일반적으로 사용

무조건 한번은 실행해야한다면
do-while문을 사용
==================================================
<배열의 요소만큼 반복 실행하기>
1.for, while, do - while
 변수를 증감시키고
 배열의 길이보다 작을 동안이라는 조건식을 걸어
 변수를 인덱스로 이용하여 배열의 요소에 접근

2.for each 반복문
for(  자료형 변수명 :  배열이름 ){
	반복실행시킬 명령어(들)
}
* 배열의 요소를 차례대로 꺼내와 변수에 담는다.

* 자료형 변수명
   배열 변수의 타입 = 변수의 타입
* 콜론(:)을 적어준다
* 위에 선언된 배열의 이름을 적어준다
*실행순서
 1.배열이름을 통해 해당 배열의 인덱스에 접근 (0부터)
 2.자료형 변수명에 해당 배열인덱스에 저장된 값을 변수에 저장
 3.명령어 실행
 1-2-3을 배열의 마지막 인덱스값까지 반복

  