<char 와 int>

-char
:문자를 저장하고있는 자료형
 각 문자마다 정해진 정수값이 있어
 int로 형변환을 하면 문자의 정수값을 가져온다.

 각 문자마다 정해진 정수값 = "아스키코드 값"
 ex) 다음 문자로 갈수록 1씩 증가한다.
 'a' = 97 , 'b' = 98
 'A' = 65, 'B' = 66

  char의 형변환
  1) 자동형변환
     문자형 자료형에 연산을 실행하면 정수값으로 변환
	Ex)
	  char a = 'a'
	  System.out.print( a + 1) // 97+1인 98이 출력
  2) 수동형변환
     (int)문자형 변수값을 지닌 변수명

	반대로, int형을 문자형으로 형변환하면 문자가 출력
	  ex) int k = 65;
	      System.out.print((char)k); // 'A' 출력
=========================================================================================
<객체와 클래스>

클래스 :
      "사용자 정의 자료형" //참조형
      사용자가 임의로
      변수(속성)와 메서드(기능)를 한 세트로 묶어 놓은 것
      여러가지 변수들과 메서드들로 구성될 수 있다.

*객체참조변수:
	   기본자료형 변수와 달리 선언과 동시에 값을 저장할 수 없다.
	   반드시! 객체참조변수를 통해서 "new 연산자"를 이용하여 객체를 생성하고 사용할 수 있다.
	   객체참조변수를 객체에 연결하고 그 참조변수를 통해서 멤버변수를 사용할 수 있다.

		ex) 
		   class Student{
			String name;
			String class;
		   }
		   class Main{
			Student sd = new Student(); //Student 타입의 sd 객체참조변수를 만듦, 이것은 새롭게 생성된 Student 클래스를 가리키고있다.
			sd.name = "홍길동"; //객체참조변수 sd가 가리키고있는 Student안의 nane이라는 멤버변수에 접근하여 "홍길동"이라는 데이터를 저장시킴

			*객체참조변수.멤버변수
			 .을 멤버접근연산자라고 한다.
		   
		   }
		
		ex) "배열"의 경우
		     Student[] arr = new Student[5]; 
		     // Student타입의 배열 arr를 만들고
		     // Student타입의 데이터를 저장할 공간 5개를 만듦 (arr[1], arr[2]....arr[4])
		     arr[0] = new Student();
		     //Student 타입의 arr[0](배열의 0번째 요소)가 새로운 Student 클래스를 가리키게 함
		     arr[0].name = "홍길동"
		     //배열의 0번째 요소가 가리키고 있는 Student 클래스 안 name이라는 멤버변수에 "홍길동"이라는 데이터를 저장함

================================================================================================================
<객체지향 프로그래밍>
== Object Oriented Programming (OOP)

-현실세계에 있는 모든 것을 객체화 할 수 있다.
 형체가 있는 것일 수도 있고 눈에 보이지 않는 개념적인 것일 수도 있다.
 ex) 형체있는것-컵, 개념적인 것-마신다 

-객체 :
	이 세상에서 단 하나 밖에 없는 유일한 것
	ex) 내 "핸드폰"
	    //핸드폰이라는 것은 많지만 내 핸드폰은 세상에서 단 하나 밖에 없는 유일한 것
	객체들은 객체를 구성하기 위한
	다양한 속성들로 구성되어 있고
	어떠한 객체들을 기능할 수 있다.

	이러한 다양한 속성과 기능을 지닌 객체를 만들기 위해서는
	객체의 설계도가 필요한데
	그것을 "클래스"라고 한다.
	객체는
	설계도(클래스)에 정의된 대로 생성되며
	객체를 만들기 위해서는 설계도(클래스)가 반드시 필요하다.
	
	객체의 설계도라 볼 수 있는 "클래스"는
	사용자가 새롭게 만드는 "자료형"이라 생각하면된다.

	클래스를 만들 때에는
	내가 표현해야하는 객체에 대하여
	"속성"과 "동작"을 먼저 분석하여 설계해야한다.
	이때,
	"속성" - 멤버변수
	"동작" - 멤버메서드 라고 한다.
--------------------------------------------------------------------------------------------------------------------------
<객체지향 프로그래밍의 특징>
 1) 은닉성
 	객체를 구성하고 있는 속성(변수)들은
	대체로 외부에 노출되지 않도록 만들어야 한다.

	권한이 있는 메서드 만이 속성에 접근하도록 만드는 것이 일반적

	모든 변수와 메서드를 감추고 있으면
	클래스 자체를 사용할 수 없으니
	어떤 것은 감추고, 어떤 것은 아무나 다 사용하게만들어라
	라고 지정해주는 "접근명시자"가 존재한다

	*접근명시자의 종류
	 
	 1)private:
	   외부로 노출하지 않을 때 사용
	 
	 2)public:
	   아무나 다 사용해도 좋을 때 사용

	 일반적으로 클래스를 만들 때
	 속성인 멤버변수들을 private로 두고
	 동작인 멤버메서드들은 public으로 두어 만듦

	 그래서
	 private에 있는 멤버변수에 직접 접근 할 수 없고
	 접근하는 메소드를 만들어 줌

	 접근해서 멤버에 값을 변경하는 메서드는
	   set~라고 만들고 // set = setter(설정자)
	 접근해서 멤버의 값을 읽어오는 메서드는
	   get~라고 만드는 것이 일반적이다. //get = getter(접근자)


