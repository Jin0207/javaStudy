<오류의 종류>
1. 문법 오류
 -자바 문법 규칙에 맞지 않는 오류
 - 컴파일이 되지 않음
 - 컴파일 시에 오류 메세지 출력 -->오류메세지를 해결해야지만 컴파일 할 수 있다.

2.논리오류
 - 자바문법은 올바르지만 논리적사고를 잘못해서 프로그램이 원하는 대로 동작하지 않는 오류 --> "버그"가 발생했다.
 * 버그를 해결하는 과정을 "디버깅"한다 라고 말함

3.실행오류
 -자바문법도 올바르고 논리적사고도 잘해 잘 실행되는 프로그램이 사용자의 부주의로 인하여 생기는 오류
 - 예외처리를 통하여 문제 해결
ex) 정수형 변수에 실수 값을 입력했다.
=======================================================================
<이름작성의 규칙> --클래스이름, 메서드이름, 변수이름

*공통적으로 지켜야할 규칙
 -이름의 첫글자는 영문이거나 "_", "$" 기호만 사용가능 
   but, 특별한 경우아니라면 영문으로 시작하자
 - 이름은 의미있게작성
 -두개 단어이상을 합쳐야 할 경우에는 두번째 단어 이후 시작하는 첫 글자 -> "대"문자
 - 이름에는 공백문자가 포함될 수 없음 -> 폴더명도 최대한 공백문자 x

*클래스이름
 -이름의 첫글자는 "대"문자로 시작

*메서드이름, 변수이름
 -이름의 첫글자는 "소"문자로 시작
================================================================
<주석문>
 - 프로그램의 실행에 영향을 끼치지 않고 설명만을 위해 존재하는 문장
 - 논리오류를 제거하기 위한 디버깅을 할 때에도 의심되는 코드를 주석문 처리해가며 활용할 수 있다.
 1)한줄 주석 //
   -시작부터 그 줄 끝까지는 주석문으로 처리
 2)여러줄 주석 /*    
	안의 문장은 전부 주석처리
                  */
=============================================================
<제어문>
 - 프로그램의 흐름을 제어하는 문장들
  1.선택문
  2. 반복문
  3. break, continue
---------------------------------------------------------------------------------------------------------
 1.선택문
  -프로그램의 상황 혹은 흐름 에따라 실행시키고자 하는 문장을 달리하고 싶을 때 사용
  1__1. if문
  1__2. switch case문
 -----------------------------------------------------------------------------------------------------
 1__1. if문
  -조건식에 따라 실행시키고자 하는 문장을 "선택"할 때 사용
  - 조건식이 참일 때 실행 시키는 문장, 거짓일 때 실행시키는 문장 달리할 수 있다.
  - if의 조건식이 참이라면 else문은 pass!하고 밑에 소스코드 실행
  - 실행할 명령어가 두가지 이상이라면 반드시 "중괄호{}"로 묶어주어야함
  - else문은 생략이가능하다.
<< if 문을 사용하는 기본 형식 >>

if (  조건식  )
	조건식이 참일때에 실행할 명령어;
else
	조건식이 거짓일때 실행할 명령어;
=========================================================================================
class SeasonName
{
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		int month;
		String name;
		System.out.print("월을 입력하세요==>");
		month = sc.nextInt();
		if(month >= 3 &&   month <= 5){
			name = "봄";
		}else if( month >= 6 && month <= 8  ){
			name  = "여름";
		}else if( month >= 9 && month <= 11){
			name = "가을";
		}else if( month == 1 || month == 2 || month == 12){
			name = "겨울";
		}

		System.out.println(month + "월은 " + name + "입니다.");
	}
}
 
 *error!
	C:\javaStudy\day0930>javac SeasonName.java
	SeasonName.java:21: error: variable name might not have been initialized
                System.out.println(month + "월은 " + name + "입니다.");
                                                   ^
	1 error

 이유) String 변수를 선언해주고 초기화를 안해주었을 때, 그 변수는 비어있는 상태임.
        if문의 조건식이 다 거짓이었을 때의 else문이 없고 바로 화면출력으로 넘어가는데 이 때 변수 name은 아무런 값도 취하고 있지 않음! --> error발생요인
        error를 없애기 위해서는 String타입의 변수 선언시 미리 " " 으로 초기화 시켜준다 
===================================================================================================================
<switch 문>
 -판단해야할  경우의 수가 여러가지 인 경우, if문보다 좀 더 간결하게 문장을 표현할 수 있다.

<<switch case문의 형식>>
switch(data){
	case 값1: 명령1;
	case 값2: 명령2;
	case 값3: 명령3;
	...
	case 값n: 명령n;
	default:명령k
}

1. data에 올 수 있는 것은 "정수형 변수" 이거나 "수식의 결과가 정수"여야함
2. case 문에 break가 없다면 해당하는 case문에서부터 끝까지 실행된다. --> break 적절한 위치에 둬야함

*switch문도 if문 처럼 중첩사용이 가능하고 if문으로도 표현할 수 있다. 
*if문 또한 switch문을 안에 사용할 수 있음